len : [a] -> Int.
len xs = _magic1 "len" xs.

index : [a] -> Int -> a.
index xs i = _magic2 "index" xs i.

cons : [a] -> [a].
cons xs = case len xs
  | 0 -> []
  else _magic1 "cons" xs.

join : [a] -> [a] -> [a].
join xs ys = _magic2 "join" xs ys.

rev_append : [a] -> [a] -> [a].
rev_append l1 l2 =
  case len l1
  | 0 -> l2
  else rev_append (cons l1) (join [index l1 0] l2).

rev : [a] -> [a].
rev l = rev_append l [].

map : (a -> b) -> [a] -> [b].
map f xs =
  case len xs
  | 0 -> []
  | 1 -> [f (index xs 0)]
  else
    let r1 = f (index xs 0) in
    let r2 = f (index xs 1) in
    let xs = cons (cons xs) in
    join [r1, r2] (map f xs).